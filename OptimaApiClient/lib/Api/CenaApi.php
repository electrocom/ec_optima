<?php
/**
 * CenaApi
 * PHP version 5
 *
 * @category Class
 * @package  OptimaClientApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EcOptimaApi
 *
 * Proste Api do Optimy
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.32
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace OptimaClientApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OptimaClientApi\ApiException;
use OptimaClientApi\Configuration;
use OptimaClientApi\HeaderSelector;
use OptimaClientApi\ObjectSerializer;

/**
 * CenaApi Class Doc Comment
 *
 * @category Class
 * @package  OptimaClientApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CenaApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation pobierzCeneTowaru
     *
     * Pobiera cenę dla towaru
     *
     * @param  int $cena_id Id Cennika z którego pobieramy ceny (required)
     * @param  int $twr_id Id Towaru dla którego pobieramy cenę (required)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \OptimaClientApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OptimaClientApi\Model\CennikItem
     */
    public function pobierzCeneTowaru($cena_id, $twr_id, $skip = null, $limit = null)
    {
        list($response) = $this->pobierzCeneTowaruWithHttpInfo($cena_id, $twr_id, $skip, $limit);
        return $response;
    }

    /**
     * Operation pobierzCeneTowaruWithHttpInfo
     *
     * Pobiera cenę dla towaru
     *
     * @param  int $cena_id Id Cennika z którego pobieramy ceny (required)
     * @param  int $twr_id Id Towaru dla którego pobieramy cenę (required)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \OptimaClientApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OptimaClientApi\Model\CennikItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function pobierzCeneTowaruWithHttpInfo($cena_id, $twr_id, $skip = null, $limit = null)
    {
        $returnType = '\OptimaClientApi\Model\CennikItem';
        $request = $this->pobierzCeneTowaruRequest($cena_id, $twr_id, $skip, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OptimaClientApi\Model\CennikItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pobierzCeneTowaruAsync
     *
     * Pobiera cenę dla towaru
     *
     * @param  int $cena_id Id Cennika z którego pobieramy ceny (required)
     * @param  int $twr_id Id Towaru dla którego pobieramy cenę (required)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pobierzCeneTowaruAsync($cena_id, $twr_id, $skip = null, $limit = null)
    {
        return $this->pobierzCeneTowaruAsyncWithHttpInfo($cena_id, $twr_id, $skip, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pobierzCeneTowaruAsyncWithHttpInfo
     *
     * Pobiera cenę dla towaru
     *
     * @param  int $cena_id Id Cennika z którego pobieramy ceny (required)
     * @param  int $twr_id Id Towaru dla którego pobieramy cenę (required)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pobierzCeneTowaruAsyncWithHttpInfo($cena_id, $twr_id, $skip = null, $limit = null)
    {
        $returnType = '\OptimaClientApi\Model\CennikItem';
        $request = $this->pobierzCeneTowaruRequest($cena_id, $twr_id, $skip, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pobierzCeneTowaru'
     *
     * @param  int $cena_id Id Cennika z którego pobieramy ceny (required)
     * @param  int $twr_id Id Towaru dla którego pobieramy cenę (required)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pobierzCeneTowaruRequest($cena_id, $twr_id, $skip = null, $limit = null)
    {
        // verify the required parameter 'cena_id' is set
        if ($cena_id === null || (is_array($cena_id) && count($cena_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cena_id when calling pobierzCeneTowaru'
            );
        }
        // verify the required parameter 'twr_id' is set
        if ($twr_id === null || (is_array($twr_id) && count($twr_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $twr_id when calling pobierzCeneTowaru'
            );
        }

        $resourcePath = '/cena/ceny/{CenaId}/towary/{TwrId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip, 'int32');
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }

        // path params
        if ($cena_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CenaId' . '}',
                ObjectSerializer::toPathValue($cena_id),
                $resourcePath
            );
        }
        // path params
        if ($twr_id !== null) {
            $resourcePath = str_replace(
                '{' . 'TwrId' . '}',
                ObjectSerializer::toPathValue($twr_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pobierzCennik
     *
     * Pobiera Cennik
     *
     * @param  int $cennik_id Id Cennika z którego pobieramy ceny (required)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \OptimaClientApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OptimaClientApi\Model\CennikItem[]
     */
    public function pobierzCennik($cennik_id, $skip = null, $limit = null)
    {
        list($response) = $this->pobierzCennikWithHttpInfo($cennik_id, $skip, $limit);
        return $response;
    }

    /**
     * Operation pobierzCennikWithHttpInfo
     *
     * Pobiera Cennik
     *
     * @param  int $cennik_id Id Cennika z którego pobieramy ceny (required)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \OptimaClientApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OptimaClientApi\Model\CennikItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function pobierzCennikWithHttpInfo($cennik_id, $skip = null, $limit = null)
    {
        $returnType = '\OptimaClientApi\Model\CennikItem[]';
        $request = $this->pobierzCennikRequest($cennik_id, $skip, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OptimaClientApi\Model\CennikItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pobierzCennikAsync
     *
     * Pobiera Cennik
     *
     * @param  int $cennik_id Id Cennika z którego pobieramy ceny (required)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pobierzCennikAsync($cennik_id, $skip = null, $limit = null)
    {
        return $this->pobierzCennikAsyncWithHttpInfo($cennik_id, $skip, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pobierzCennikAsyncWithHttpInfo
     *
     * Pobiera Cennik
     *
     * @param  int $cennik_id Id Cennika z którego pobieramy ceny (required)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pobierzCennikAsyncWithHttpInfo($cennik_id, $skip = null, $limit = null)
    {
        $returnType = '\OptimaClientApi\Model\CennikItem[]';
        $request = $this->pobierzCennikRequest($cennik_id, $skip, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pobierzCennik'
     *
     * @param  int $cennik_id Id Cennika z którego pobieramy ceny (required)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pobierzCennikRequest($cennik_id, $skip = null, $limit = null)
    {
        // verify the required parameter 'cennik_id' is set
        if ($cennik_id === null || (is_array($cennik_id) && count($cennik_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cennik_id when calling pobierzCennik'
            );
        }

        $resourcePath = '/ceny/cennik/{CennikId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip, 'int32');
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }

        // path params
        if ($cennik_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CennikId' . '}',
                ObjectSerializer::toPathValue($cennik_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pobierzCennikPost
     *
     * Pobiera Ceny tylko dla wybranych towarów
     *
     * @param  int[] $body Optional description in *Markdown* (required)
     * @param  int $cennik_id Id Cennika z którego pobieramy ceny (required)
     *
     * @throws \OptimaClientApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OptimaClientApi\Model\CennikItem[]
     */
    public function pobierzCennikPost($body, $cennik_id)
    {
        list($response) = $this->pobierzCennikPostWithHttpInfo($body, $cennik_id);
        return $response;
    }

    /**
     * Operation pobierzCennikPostWithHttpInfo
     *
     * Pobiera Ceny tylko dla wybranych towarów
     *
     * @param  int[] $body Optional description in *Markdown* (required)
     * @param  int $cennik_id Id Cennika z którego pobieramy ceny (required)
     *
     * @throws \OptimaClientApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OptimaClientApi\Model\CennikItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function pobierzCennikPostWithHttpInfo($body, $cennik_id)
    {
        $returnType = '\OptimaClientApi\Model\CennikItem[]';
        $request = $this->pobierzCennikPostRequest($body, $cennik_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OptimaClientApi\Model\CennikItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pobierzCennikPostAsync
     *
     * Pobiera Ceny tylko dla wybranych towarów
     *
     * @param  int[] $body Optional description in *Markdown* (required)
     * @param  int $cennik_id Id Cennika z którego pobieramy ceny (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pobierzCennikPostAsync($body, $cennik_id)
    {
        return $this->pobierzCennikPostAsyncWithHttpInfo($body, $cennik_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pobierzCennikPostAsyncWithHttpInfo
     *
     * Pobiera Ceny tylko dla wybranych towarów
     *
     * @param  int[] $body Optional description in *Markdown* (required)
     * @param  int $cennik_id Id Cennika z którego pobieramy ceny (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pobierzCennikPostAsyncWithHttpInfo($body, $cennik_id)
    {
        $returnType = '\OptimaClientApi\Model\CennikItem[]';
        $request = $this->pobierzCennikPostRequest($body, $cennik_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pobierzCennikPost'
     *
     * @param  int[] $body Optional description in *Markdown* (required)
     * @param  int $cennik_id Id Cennika z którego pobieramy ceny (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pobierzCennikPostRequest($body, $cennik_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling pobierzCennikPost'
            );
        }
        // verify the required parameter 'cennik_id' is set
        if ($cennik_id === null || (is_array($cennik_id) && count($cennik_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cennik_id when calling pobierzCennikPost'
            );
        }

        $resourcePath = '/ceny/cennik/{CennikId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cennik_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CennikId' . '}',
                ObjectSerializer::toPathValue($cennik_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pobierzCenyTowaru
     *
     * Pobieranie cen określonego towaru.
     *
     * @param  int $twr_id Id Towaru dla którego pobieramy cenę (required)
     *
     * @throws \OptimaClientApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OptimaClientApi\Model\CennikItem[]
     */
    public function pobierzCenyTowaru($twr_id)
    {
        list($response) = $this->pobierzCenyTowaruWithHttpInfo($twr_id);
        return $response;
    }

    /**
     * Operation pobierzCenyTowaruWithHttpInfo
     *
     * Pobieranie cen określonego towaru.
     *
     * @param  int $twr_id Id Towaru dla którego pobieramy cenę (required)
     *
     * @throws \OptimaClientApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OptimaClientApi\Model\CennikItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function pobierzCenyTowaruWithHttpInfo($twr_id)
    {
        $returnType = '\OptimaClientApi\Model\CennikItem[]';
        $request = $this->pobierzCenyTowaruRequest($twr_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OptimaClientApi\Model\CennikItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pobierzCenyTowaruAsync
     *
     * Pobieranie cen określonego towaru.
     *
     * @param  int $twr_id Id Towaru dla którego pobieramy cenę (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pobierzCenyTowaruAsync($twr_id)
    {
        return $this->pobierzCenyTowaruAsyncWithHttpInfo($twr_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pobierzCenyTowaruAsyncWithHttpInfo
     *
     * Pobieranie cen określonego towaru.
     *
     * @param  int $twr_id Id Towaru dla którego pobieramy cenę (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pobierzCenyTowaruAsyncWithHttpInfo($twr_id)
    {
        $returnType = '\OptimaClientApi\Model\CennikItem[]';
        $request = $this->pobierzCenyTowaruRequest($twr_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pobierzCenyTowaru'
     *
     * @param  int $twr_id Id Towaru dla którego pobieramy cenę (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pobierzCenyTowaruRequest($twr_id)
    {
        // verify the required parameter 'twr_id' is set
        if ($twr_id === null || (is_array($twr_id) && count($twr_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $twr_id when calling pobierzCenyTowaru'
            );
        }

        $resourcePath = '/cena/towary/{TwrId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($twr_id !== null) {
            $resourcePath = str_replace(
                '{' . 'TwrId' . '}',
                ObjectSerializer::toPathValue($twr_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pobierzDefCeny
     *
     * Pobieranie definicji cen.
     *
     *
     * @throws \OptimaClientApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OptimaClientApi\Model\CenyDefItem[]
     */
    public function pobierzDefCeny()
    {
        list($response) = $this->pobierzDefCenyWithHttpInfo();
        return $response;
    }

    /**
     * Operation pobierzDefCenyWithHttpInfo
     *
     * Pobieranie definicji cen.
     *
     *
     * @throws \OptimaClientApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OptimaClientApi\Model\CenyDefItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function pobierzDefCenyWithHttpInfo()
    {
        $returnType = '\OptimaClientApi\Model\CenyDefItem[]';
        $request = $this->pobierzDefCenyRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OptimaClientApi\Model\CenyDefItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pobierzDefCenyAsync
     *
     * Pobieranie definicji cen.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pobierzDefCenyAsync()
    {
        return $this->pobierzDefCenyAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pobierzDefCenyAsyncWithHttpInfo
     *
     * Pobieranie definicji cen.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pobierzDefCenyAsyncWithHttpInfo()
    {
        $returnType = '\OptimaClientApi\Model\CenyDefItem[]';
        $request = $this->pobierzDefCenyRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pobierzDefCeny'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pobierzDefCenyRequest()
    {

        $resourcePath = '/cena/ceny-def';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
