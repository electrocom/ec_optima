<?php
/**
 * MagazynApi
 * PHP version 5
 *
 * @category Class
 * @package  OptimaClientApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EcOptimaApi
 *
 * Proste Api do Optimy
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.32
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace OptimaClientApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OptimaClientApi\ApiException;
use OptimaClientApi\Configuration;
use OptimaClientApi\HeaderSelector;
use OptimaClientApi\ObjectSerializer;

/**
 * MagazynApi Class Doc Comment
 *
 * @category Class
 * @package  OptimaClientApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MagazynApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation pobierzDefMagazyny
     *
     * Pobiera listę magazynów
     *
     *
     * @throws \OptimaClientApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OptimaClientApi\Model\MagazynItem[]
     */
    public function pobierzDefMagazyny()
    {
        list($response) = $this->pobierzDefMagazynyWithHttpInfo();
        return $response;
    }

    /**
     * Operation pobierzDefMagazynyWithHttpInfo
     *
     * Pobiera listę magazynów
     *
     *
     * @throws \OptimaClientApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OptimaClientApi\Model\MagazynItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function pobierzDefMagazynyWithHttpInfo()
    {
        $returnType = '\OptimaClientApi\Model\MagazynItem[]';
        $request = $this->pobierzDefMagazynyRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OptimaClientApi\Model\MagazynItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pobierzDefMagazynyAsync
     *
     * Pobiera listę magazynów
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pobierzDefMagazynyAsync()
    {
        return $this->pobierzDefMagazynyAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pobierzDefMagazynyAsyncWithHttpInfo
     *
     * Pobiera listę magazynów
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pobierzDefMagazynyAsyncWithHttpInfo()
    {
        $returnType = '\OptimaClientApi\Model\MagazynItem[]';
        $request = $this->pobierzDefMagazynyRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pobierzDefMagazyny'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pobierzDefMagazynyRequest()
    {

        $resourcePath = '/magazyn/magazyny-def';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pobierzIloscTowaru
     *
     * Pobieranie stanu magazynowego
     *
     * @param  int[] $body Lista TwrId dla których chcemy pobrać cenę (required)
     * @param  null[] $mag_id Lista magazynów  z których sumujemy dostępną ilość towaru (required)
     * @param  int $dni Produkty których stan magazynowych zmienił się w ciągu X ostatnich dni (optional)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \OptimaClientApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OptimaClientApi\Model\IloscTowaruItem[]
     */
    public function pobierzIloscTowaru($body, $mag_id, $dni = null, $skip = null, $limit = null)
    {
        list($response) = $this->pobierzIloscTowaruWithHttpInfo($body, $mag_id, $dni, $skip, $limit);
        return $response;
    }

    /**
     * Operation pobierzIloscTowaruWithHttpInfo
     *
     * Pobieranie stanu magazynowego
     *
     * @param  int[] $body Lista TwrId dla których chcemy pobrać cenę (required)
     * @param  null[] $mag_id Lista magazynów  z których sumujemy dostępną ilość towaru (required)
     * @param  int $dni Produkty których stan magazynowych zmienił się w ciągu X ostatnich dni (optional)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \OptimaClientApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OptimaClientApi\Model\IloscTowaruItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function pobierzIloscTowaruWithHttpInfo($body, $mag_id, $dni = null, $skip = null, $limit = null)
    {
        $returnType = '\OptimaClientApi\Model\IloscTowaruItem[]';
        $request = $this->pobierzIloscTowaruRequest($body, $mag_id, $dni, $skip, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OptimaClientApi\Model\IloscTowaruItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pobierzIloscTowaruAsync
     *
     * Pobieranie stanu magazynowego
     *
     * @param  int[] $body Lista TwrId dla których chcemy pobrać cenę (required)
     * @param  null[] $mag_id Lista magazynów  z których sumujemy dostępną ilość towaru (required)
     * @param  int $dni Produkty których stan magazynowych zmienił się w ciągu X ostatnich dni (optional)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pobierzIloscTowaruAsync($body, $mag_id, $dni = null, $skip = null, $limit = null)
    {
        return $this->pobierzIloscTowaruAsyncWithHttpInfo($body, $mag_id, $dni, $skip, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pobierzIloscTowaruAsyncWithHttpInfo
     *
     * Pobieranie stanu magazynowego
     *
     * @param  int[] $body Lista TwrId dla których chcemy pobrać cenę (required)
     * @param  null[] $mag_id Lista magazynów  z których sumujemy dostępną ilość towaru (required)
     * @param  int $dni Produkty których stan magazynowych zmienił się w ciągu X ostatnich dni (optional)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pobierzIloscTowaruAsyncWithHttpInfo($body, $mag_id, $dni = null, $skip = null, $limit = null)
    {
        $returnType = '\OptimaClientApi\Model\IloscTowaruItem[]';
        $request = $this->pobierzIloscTowaruRequest($body, $mag_id, $dni, $skip, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pobierzIloscTowaru'
     *
     * @param  int[] $body Lista TwrId dla których chcemy pobrać cenę (required)
     * @param  null[] $mag_id Lista magazynów  z których sumujemy dostępną ilość towaru (required)
     * @param  int $dni Produkty których stan magazynowych zmienił się w ciągu X ostatnich dni (optional)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pobierzIloscTowaruRequest($body, $mag_id, $dni = null, $skip = null, $limit = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling pobierzIloscTowaru'
            );
        }
        // verify the required parameter 'mag_id' is set
        if ($mag_id === null || (is_array($mag_id) && count($mag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mag_id when calling pobierzIloscTowaru'
            );
        }

        $resourcePath = '/stany-magazynowe/ilosc-towaru';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($mag_id)) {
            $mag_id = ObjectSerializer::serializeCollection($mag_id, 'multi', true);
        }
        if ($mag_id !== null) {
            $queryParams['MagId'] = ObjectSerializer::toQueryValue($mag_id, 'int32');
        }
        // query params
        if ($dni !== null) {
            $queryParams['dni'] = ObjectSerializer::toQueryValue($dni, 'int32');
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip, 'int32');
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pobierzStanMagazynowyDlaTowaru
     *
     * Pobiera stan magazynowy towaru
     *
     * @param  int $twr_id Id Towaru dla którego pobieramy dostępną ilość (required)
     * @param  int $mag_id Id Magazynu (required)
     *
     * @throws \OptimaClientApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OptimaClientApi\Model\IloscItem
     */
    public function pobierzStanMagazynowyDlaTowaru($twr_id, $mag_id)
    {
        list($response) = $this->pobierzStanMagazynowyDlaTowaruWithHttpInfo($twr_id, $mag_id);
        return $response;
    }

    /**
     * Operation pobierzStanMagazynowyDlaTowaruWithHttpInfo
     *
     * Pobiera stan magazynowy towaru
     *
     * @param  int $twr_id Id Towaru dla którego pobieramy dostępną ilość (required)
     * @param  int $mag_id Id Magazynu (required)
     *
     * @throws \OptimaClientApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OptimaClientApi\Model\IloscItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function pobierzStanMagazynowyDlaTowaruWithHttpInfo($twr_id, $mag_id)
    {
        $returnType = '\OptimaClientApi\Model\IloscItem';
        $request = $this->pobierzStanMagazynowyDlaTowaruRequest($twr_id, $mag_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OptimaClientApi\Model\IloscItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pobierzStanMagazynowyDlaTowaruAsync
     *
     * Pobiera stan magazynowy towaru
     *
     * @param  int $twr_id Id Towaru dla którego pobieramy dostępną ilość (required)
     * @param  int $mag_id Id Magazynu (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pobierzStanMagazynowyDlaTowaruAsync($twr_id, $mag_id)
    {
        return $this->pobierzStanMagazynowyDlaTowaruAsyncWithHttpInfo($twr_id, $mag_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pobierzStanMagazynowyDlaTowaruAsyncWithHttpInfo
     *
     * Pobiera stan magazynowy towaru
     *
     * @param  int $twr_id Id Towaru dla którego pobieramy dostępną ilość (required)
     * @param  int $mag_id Id Magazynu (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pobierzStanMagazynowyDlaTowaruAsyncWithHttpInfo($twr_id, $mag_id)
    {
        $returnType = '\OptimaClientApi\Model\IloscItem';
        $request = $this->pobierzStanMagazynowyDlaTowaruRequest($twr_id, $mag_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pobierzStanMagazynowyDlaTowaru'
     *
     * @param  int $twr_id Id Towaru dla którego pobieramy dostępną ilość (required)
     * @param  int $mag_id Id Magazynu (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pobierzStanMagazynowyDlaTowaruRequest($twr_id, $mag_id)
    {
        // verify the required parameter 'twr_id' is set
        if ($twr_id === null || (is_array($twr_id) && count($twr_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $twr_id when calling pobierzStanMagazynowyDlaTowaru'
            );
        }
        // verify the required parameter 'mag_id' is set
        if ($mag_id === null || (is_array($mag_id) && count($mag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mag_id when calling pobierzStanMagazynowyDlaTowaru'
            );
        }

        $resourcePath = '/stany-magazynowe/towary/{TwrId}/Magazyn/{MagId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($twr_id !== null) {
            $resourcePath = str_replace(
                '{' . 'TwrId' . '}',
                ObjectSerializer::toPathValue($twr_id),
                $resourcePath
            );
        }
        // path params
        if ($mag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'MagId' . '}',
                ObjectSerializer::toPathValue($mag_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pobierzStanyMag
     *
     * Pobieranie stanu magazynowego
     *
     * @param  int $mag_id Id magazynu z którego pobieramy dostępną ilość towaru (required)
     * @param  int $dni Produkty których stan magazynowych zmienił się w ciągu X ostatnich dni (optional)
     * @param  int[] $twr_ids Id towarów dla których pobieramy stan magazynowy (optional)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \OptimaClientApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OptimaClientApi\Model\IloscItem[]
     */
    public function pobierzStanyMag($mag_id, $dni = null, $twr_ids = null, $skip = null, $limit = null)
    {
        list($response) = $this->pobierzStanyMagWithHttpInfo($mag_id, $dni, $twr_ids, $skip, $limit);
        return $response;
    }

    /**
     * Operation pobierzStanyMagWithHttpInfo
     *
     * Pobieranie stanu magazynowego
     *
     * @param  int $mag_id Id magazynu z którego pobieramy dostępną ilość towaru (required)
     * @param  int $dni Produkty których stan magazynowych zmienił się w ciągu X ostatnich dni (optional)
     * @param  int[] $twr_ids Id towarów dla których pobieramy stan magazynowy (optional)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \OptimaClientApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OptimaClientApi\Model\IloscItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function pobierzStanyMagWithHttpInfo($mag_id, $dni = null, $twr_ids = null, $skip = null, $limit = null)
    {
        $returnType = '\OptimaClientApi\Model\IloscItem[]';
        $request = $this->pobierzStanyMagRequest($mag_id, $dni, $twr_ids, $skip, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OptimaClientApi\Model\IloscItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pobierzStanyMagAsync
     *
     * Pobieranie stanu magazynowego
     *
     * @param  int $mag_id Id magazynu z którego pobieramy dostępną ilość towaru (required)
     * @param  int $dni Produkty których stan magazynowych zmienił się w ciągu X ostatnich dni (optional)
     * @param  int[] $twr_ids Id towarów dla których pobieramy stan magazynowy (optional)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pobierzStanyMagAsync($mag_id, $dni = null, $twr_ids = null, $skip = null, $limit = null)
    {
        return $this->pobierzStanyMagAsyncWithHttpInfo($mag_id, $dni, $twr_ids, $skip, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pobierzStanyMagAsyncWithHttpInfo
     *
     * Pobieranie stanu magazynowego
     *
     * @param  int $mag_id Id magazynu z którego pobieramy dostępną ilość towaru (required)
     * @param  int $dni Produkty których stan magazynowych zmienił się w ciągu X ostatnich dni (optional)
     * @param  int[] $twr_ids Id towarów dla których pobieramy stan magazynowy (optional)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pobierzStanyMagAsyncWithHttpInfo($mag_id, $dni = null, $twr_ids = null, $skip = null, $limit = null)
    {
        $returnType = '\OptimaClientApi\Model\IloscItem[]';
        $request = $this->pobierzStanyMagRequest($mag_id, $dni, $twr_ids, $skip, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pobierzStanyMag'
     *
     * @param  int $mag_id Id magazynu z którego pobieramy dostępną ilość towaru (required)
     * @param  int $dni Produkty których stan magazynowych zmienił się w ciągu X ostatnich dni (optional)
     * @param  int[] $twr_ids Id towarów dla których pobieramy stan magazynowy (optional)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pobierzStanyMagRequest($mag_id, $dni = null, $twr_ids = null, $skip = null, $limit = null)
    {
        // verify the required parameter 'mag_id' is set
        if ($mag_id === null || (is_array($mag_id) && count($mag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mag_id when calling pobierzStanyMag'
            );
        }

        $resourcePath = '/stany-magazynowe/magazyn/{MagId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dni !== null) {
            $queryParams['dni'] = ObjectSerializer::toQueryValue($dni, 'int32');
        }
        // query params
        if (is_array($twr_ids)) {
            $twr_ids = ObjectSerializer::serializeCollection($twr_ids, 'csv', true);
        }
        if ($twr_ids !== null) {
            $queryParams['TwrIds'] = ObjectSerializer::toQueryValue($twr_ids, null);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip, 'int32');
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }

        // path params
        if ($mag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'MagId' . '}',
                ObjectSerializer::toPathValue($mag_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pobierzStanyMagPost
     *
     * Pobieranie stanu magazynowego
     *
     * @param  int[] $body Lista TwrId dla których chcemy pobrać cenę (required)
     * @param  int $mag_id Id magazynu z którego pobieramy dostępną ilość towaru (required)
     * @param  int $dni Produkty których stan magazynowych zmienił się w ciągu X ostatnich dni (optional)
     * @param  int[] $twr_ids Id towarów dla których pobieramy stan magazynowy (optional)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \OptimaClientApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OptimaClientApi\Model\IloscItem[]
     */
    public function pobierzStanyMagPost($body, $mag_id, $dni = null, $twr_ids = null, $skip = null, $limit = null)
    {
        list($response) = $this->pobierzStanyMagPostWithHttpInfo($body, $mag_id, $dni, $twr_ids, $skip, $limit);
        return $response;
    }

    /**
     * Operation pobierzStanyMagPostWithHttpInfo
     *
     * Pobieranie stanu magazynowego
     *
     * @param  int[] $body Lista TwrId dla których chcemy pobrać cenę (required)
     * @param  int $mag_id Id magazynu z którego pobieramy dostępną ilość towaru (required)
     * @param  int $dni Produkty których stan magazynowych zmienił się w ciągu X ostatnich dni (optional)
     * @param  int[] $twr_ids Id towarów dla których pobieramy stan magazynowy (optional)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \OptimaClientApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OptimaClientApi\Model\IloscItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function pobierzStanyMagPostWithHttpInfo($body, $mag_id, $dni = null, $twr_ids = null, $skip = null, $limit = null)
    {
        $returnType = '\OptimaClientApi\Model\IloscItem[]';
        $request = $this->pobierzStanyMagPostRequest($body, $mag_id, $dni, $twr_ids, $skip, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OptimaClientApi\Model\IloscItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pobierzStanyMagPostAsync
     *
     * Pobieranie stanu magazynowego
     *
     * @param  int[] $body Lista TwrId dla których chcemy pobrać cenę (required)
     * @param  int $mag_id Id magazynu z którego pobieramy dostępną ilość towaru (required)
     * @param  int $dni Produkty których stan magazynowych zmienił się w ciągu X ostatnich dni (optional)
     * @param  int[] $twr_ids Id towarów dla których pobieramy stan magazynowy (optional)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pobierzStanyMagPostAsync($body, $mag_id, $dni = null, $twr_ids = null, $skip = null, $limit = null)
    {
        return $this->pobierzStanyMagPostAsyncWithHttpInfo($body, $mag_id, $dni, $twr_ids, $skip, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pobierzStanyMagPostAsyncWithHttpInfo
     *
     * Pobieranie stanu magazynowego
     *
     * @param  int[] $body Lista TwrId dla których chcemy pobrać cenę (required)
     * @param  int $mag_id Id magazynu z którego pobieramy dostępną ilość towaru (required)
     * @param  int $dni Produkty których stan magazynowych zmienił się w ciągu X ostatnich dni (optional)
     * @param  int[] $twr_ids Id towarów dla których pobieramy stan magazynowy (optional)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pobierzStanyMagPostAsyncWithHttpInfo($body, $mag_id, $dni = null, $twr_ids = null, $skip = null, $limit = null)
    {
        $returnType = '\OptimaClientApi\Model\IloscItem[]';
        $request = $this->pobierzStanyMagPostRequest($body, $mag_id, $dni, $twr_ids, $skip, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pobierzStanyMagPost'
     *
     * @param  int[] $body Lista TwrId dla których chcemy pobrać cenę (required)
     * @param  int $mag_id Id magazynu z którego pobieramy dostępną ilość towaru (required)
     * @param  int $dni Produkty których stan magazynowych zmienił się w ciągu X ostatnich dni (optional)
     * @param  int[] $twr_ids Id towarów dla których pobieramy stan magazynowy (optional)
     * @param  int $skip number of records to skip for pagination (optional)
     * @param  int $limit maximum number of records to return (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pobierzStanyMagPostRequest($body, $mag_id, $dni = null, $twr_ids = null, $skip = null, $limit = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling pobierzStanyMagPost'
            );
        }
        // verify the required parameter 'mag_id' is set
        if ($mag_id === null || (is_array($mag_id) && count($mag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mag_id when calling pobierzStanyMagPost'
            );
        }

        $resourcePath = '/stany-magazynowe/magazyn/{MagId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dni !== null) {
            $queryParams['dni'] = ObjectSerializer::toQueryValue($dni, 'int32');
        }
        // query params
        if (is_array($twr_ids)) {
            $twr_ids = ObjectSerializer::serializeCollection($twr_ids, 'csv', true);
        }
        if ($twr_ids !== null) {
            $queryParams['TwrIds'] = ObjectSerializer::toQueryValue($twr_ids, null);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip, 'int32');
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }

        // path params
        if ($mag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'MagId' . '}',
                ObjectSerializer::toPathValue($mag_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
